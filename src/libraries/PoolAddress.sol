// SPDX-License-Identifier: MIT

pragma solidity 0.8.20;

import {UniswapV3SimulatorPool} from "../UniswapV3SimulatorPool.sol";

/// library that will help us calculate pool contract addresses from other contracts.
/// This library will have only one function, computeAddress.
library PoolAddress {
    error PoolAddress__InvalidTokenOrder();

    /* 
     * @param _factory is the address of the deployer, in our case the Factory contract;
     * @param _token0 is the token address related to that specific pool's token0
     * @param _token1 is the token address related to that specific pool's token1.
     * @param _tickSpacing is the uint24 tickSpace value related to that specific pool's tickSpacing.
     * @return pre_deployed_pool pool contract address wich has been deployed/speculated via CREATE2 opcode.
     * @dev hashed contract code is needed to protect from collisions: different contracts can have the same salt, but their code hash will be different.
     * @notice We can use this function from anywhere to find a pool address without making any external calls and without querying the factory.
     * @audit - is CREATE2 opcode availabe for other chains?
     * @audit-info - Let's write it via assembly to get rid of this dirty memory assesment.
    */
    function computeAddress(address _factory, address _token0, address _token1, uint24 _tickSpacing)
        internal
        pure
        returns (address pre_deployed_pool)
    {
        if (_token0 > _token1) revert PoolAddress__InvalidTokenOrder();
        //This is what CREATE2 does under the hood to calculate the new contract address.
        pre_deployed_pool = address(
            uint160(
                uint256(
                    keccak256(
                        abi.encodePacked(
                            hex'ff', // as defined in the EIP, is used to distinguish addresses generated by CREATE and CREATE2;
                            _factory,
                            keccak256(abi.encodePacked(_token0, _token1, _tickSpacing)),
                            keccak256(type(UniswapV3SimulatorPool).creationCode) // hashed contract code is needed to protect from hash-collisions.
                        )
                    )
                )
            )
        );
    }
}
